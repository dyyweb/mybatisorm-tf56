package ${serviceImplPackage} ;

import ${pojoPackage}.${bigDoName};
import ${daoPackage}.${bigDaoName};
import ${servicePackage}.${bigServiceName};
import tf56.spider.base.ResultModel;
import com.alibaba.dubbo.config.annotation.Service;
import javax.annotation.Resource;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

/**
* author: dy
* JDK-version:  JDK1.8
* comments:  ${headName}服务实现层
* since Date： ${date}
*/
@Service
public class ${bigServiceImplName} implements ${bigServiceName}{

    @Resource
    private ${bigDaoName} ${minDaoName};

    /**
    * 多条件查询(分页)
    * @param ${minDoName} ${bigDoName}
    * @param pageRequest ${bigDoName}>
    * @return ResultModel
    */
    @Override
    ResultModel<${bigDoName}> query${bigDoName}ListForPage(${bigDoName} ${minDoName}) throws Exception{
        try {

            Assert.notNull(pageRequest, "分页参数不能为空");
            Assert.notNull(${minDoName}, "传入参数不能为空");
        
            List<${bigDoName}> list = ${minDaoName}.selectListByParams(${minDoName}, pageRequest);
            if (list == null || list.isEmpty())
                return new ResultModel<>(false,"查询结果为空", ErrorCode.ITEM_IS_NULL);
            else
                return new ResultModel<>(pageRequest.data(list));
        } catch (IllegalArgumentException e) {
            logger.error("多条件查询${bigDoName}校验参数异常!",e);
            return new ResultModel<>(false, ErrorCode.NOT_FIND_PARAM,e.getMessage());
        } catch (Exception e) {
            logger.error("多条件查询${bigDoName}信息异常!", e);
            return new ResultModel<>(false,e.getMessage(),ErrorCode.QUERY_LIST_EXCEPTION);
        }
    }

    /**
    * 根据参数查询
    * @param id Long
    * @return ResultModel
    */
    @Override
    ResultModel<${bigDoName}> selectByParams(${bigDoName} ${minDoName}){
        try {
            Assert.isTrue(id != null,"查询Id不能为空!");
            ${bigDoName} ${minDoName} = ${minDaoName}.selectByParams(${minDoName});
            if (orders == null)
                return new ResultModel<>(false, "查询结果为空", ErrorCode.ITEM_IS_NULL);
            else
                return new ResultModel<>(${minDoName});
        } catch (IllegalArgumentException e) {
            logger.error("查询${bigDoName}传入Id为空!",e);
            return new ResultModel<>(false, ErrorCode.NOT_FIND_PARAM,e.getMessage());
        } catch (Exception e) {
            logger.error(e.getMessage()),e);
            return new ResultModel<>(false,ErrorCode.GET_EXCEPTION,"查询异常!");
        }
    }

    /**
    * 添加
    * @param ${minDoName} ${bigDoName}
    * @return ResultModel
    */
    @Override
    ResultModel<${bigDoName}> add${bigDoName}(${bigDoName} ${minDoName}){
        try {
            // Validate
            validateForAdd(${minDoName});
    
            // Insert
            int result = ${minDaoName}.insert(${minDoName});
            if (result < 1) {
                throw new Exception("sql插入数据为0,请检查各项参数!");
            }
            logger.info("新增ID=>[" + ${minDoName}.getId() + "]的${bigDoName}成功");
            return new ResultModel<>(${minDoName});
        } catch (IllegalArgumentException e) {
            logger.error("新增${bigDoName}校验参数异常!",e);
            return new ResultModel<>(false,ErrorCode.NOT_FIND_PARAM,e.getMessage());
        } catch (Exception e) {
            logger.error("新增ID=>[" + ${minDoName}.getId() + "]的${bigDoName}信息异常!",e);
            return new ResultModel<>(false,ErrorCode.INSERT_EXCEPTION, "新增信息异常!");
        }
    }

    /**
    * Validate Add
    * @param ${minDoName} ${bigDoName}
    */
    private void validateForAdd(${bigDoName} ${minDoName}) {
        Assert.isTrue(${minDoName} != null,"${minDoName}不能为空!");
        // TODO Validate
    }

    /**
    * 修改
    * @param ${minDoName} ${minDoName}
    * @return ResultModel
    */
    @Override
    ResultModel<${bigDoName}> modify${bigDoName}(${bigDoName} ${minDoName}){
        try {

            // validate
            ${bigDoName} old${minDoName} = validateForUpdate(${minDoName});

            // Update
            int result = ${minDaoName}.updateById(${minDoName});
            if (result < 1) {
                throw new Exception("sql修改数据为0,请检查各项参数!");
            }
            logger.info("修改ID=>[" + ${minDoName}.getId() + "]的${bigDoName}成功!");
            return new ResultModel<>();
        } catch (IllegalArgumentException e) {
            logger.error("修改${bigDoName}校验参数异常!",e);
            return new ResultModel<>(false,ErrorCode.NOT_FIND_PARAM,e.getMessage());
        } catch (Exception e) {
            logger.error("修改ID=>[" + ${minDoName}.getId() + "]的${bigDoName}信息异常",e);
            return new ResultModel<>(false,ErrorCode.UPDATE_EXCEPTION, "修改信息异常!");
        }
    }

    /**
    * Validate Update
    * @param ${minDoName} ${bigDoName}
    * @return ${bigDoName}
    */
    private ${bigDoName} validateForUpdate(${bigDoName} ${minDoName}) {

        Assert.isTrue(${minDoName} != null,"${bigDoName}不能为空!");
        Assert.isTrue(${minDoName}.getId() != null,"查询Id不能为空!");
        // TODO Validate
        ${bigDoName} old${bigDoName} = ${minDaoName}.selectById(${minDoName}.getId());
        Assert.isTrue(old${bigDoName} != null,"查询不到ID=>[" + ${minDoName}.getId() + "]的信息!");
        return old${bigDoName};
    }
}
