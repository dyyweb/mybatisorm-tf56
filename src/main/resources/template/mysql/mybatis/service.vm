package ${serviceImplPackage} ;

import ${pojoPackage}.${bigDoName};
import ${daoPackage}.${bigDaoName};
import ${servicePackage}.${bigServiceName};
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.Assert;
import tf56.spider.base.ResultModel;
import com.alibaba.dubbo.config.annotation.Service;
import javax.annotation.Resource;


/**
* author: dy
* JDK-version:  JDK1.8
* comments:  ${headName}服务实现层
* since Date： ${date}
*/
@Service
public class ${bigServiceImplName} implements ${bigServiceName}{
private static final Logger logger = LoggerFactory.getLogger(${bigServiceImplName}.class);

    @Resource
    private ${bigDaoName} ${minDaoName};


    /**
    * Validate Add
    * @param ${minDoName} ${bigDoName}
    */
    private void validateForAdd(${bigDoName} ${minDoName}) {
        Assert.isTrue(${minDoName} != null,"${minDoName}不能为空!");
        // TODO Validate
    }


    /**
    * 多条件查询(分页)
    * @param ${minDoName} ${bigDoName}
    * @return ResultModel
    */
    @Override
    ResultModel<List<${bigDoName}>> select${bigDoName}ListForPage(${bigDoName} ${minDoName}) throws Exception{
        try {

            Assert.notNull(${minDoName}, "分页参数不能为空");
            Assert.notNull(${minDoName}, "传入参数不能为空");
        
            List<${bigDoName}> list = ${minDaoName}.selectListByParams(${minDoName});
            if (list == null || list.isEmpty())
               return new ResultModel<List<${bigDoName}>>(ResultModel.RESULT_SUCCESS,"查询结果为空",list.size(),list,null);
            else
                return new ResultModel<List<${bigDoName}>>(ResultModel.RESULT_SUCCESS,"查询成功",list.size(),list,null);
        } catch (IllegalArgumentException e) {
            logger.error("多条件查询${bigDoName}校验参数异常!",e);
           return new ResultModel<List<${bigDoName}>>(ResultModel.RESULT_ERROR,"查询参数异常",-1,null,e.getMessage());
        } catch (Exception e) {
            logger.error("多条件查询${bigDoName}信息异常!", e);
            return new ResultModel<List<${bigDoName}>>(ResultModel.RESULT_ERROR,"查询异常",-1,null,e.getMessage());
        }
    }

    /**
    * 根据参数查询
    * @param ${minDoName}
    * @return ResultModel
    */
    @Override
    ResultModel<${bigDoName}> selectByParams(${bigDoName} ${minDoName}){
        try {
            Assert.isTrue(id != null,"查询Id不能为空!");
            ${bigDoName} ${minDoName} = ${minDaoName}.selectByParams(${minDoName});
            if (${minDoName} == null)
               return new ResultModel<${bigDoName}>(ResultModel.RESULT_SUCCESS,"查询结果为空",-1,${minDoName},null);
            else
                return new ResultModel<${bigDoName}>(ResultModel.RESULT_SUCCESS,"查询成功",1,${minDoName},null);
        } catch (Exception e) {
           logger.error(e.getMessage(),e);
            return new ResultModel<${bigDoName}>(ResultModel.RESULT_ERROR,"查询异常",-1,null,e.getMessage());
        }
    }

    /**
    * 添加
    * @param ${minDoName} ${bigDoName}
    * @return ResultModel
    */
    @Override
    ResultModel<Integer>  create${bigDoName}(${bigDoName} ${minDoName}){
        try {
            // Validate
            validateForAdd(${minDoName});
    
            // Insert
            int num = ${minDaoName}.insert(${minDoName});
            if (num < 1) {
                throw new Exception("sql插入数据为0,请检查各项参数!");
            }
            logger.info("新增ID=>[" + ${minDoName}.getId() + "]的${bigDoName}成功");
           return new ResultModel<Integer>(ResultModel.RESULT_SUCCESS,"插入成功",-1,num,null);
        }catch (Exception e) {
           logger.error("新增ID=>[" +1 + "]的ClearJour失败");
            return new ResultModel<Integer>(ResultModel.RESULT_ERROR,e.getMessage(),-1,null,null);
        }
    }


    /**
    * Validate Update
    * @param ${minDoName} ${bigDoName}
    * @return ${bigDoName}
    */
    private ${bigDoName} validateForUpdate(${bigDoName} ${minDoName}) {

        Assert.isTrue(${minDoName} != null,"${bigDoName}不能为空!");
        Assert.isTrue(${minDoName}.getId() != null,"查询Id不能为空!");
        // TODO Validate
        ${bigDoName} old${bigDoName} = ${minDaoName}.selectById(${minDoName}.getId());
        Assert.isTrue(old${bigDoName} != null,"查询不到ID=>[" + ${minDoName}.getId() + "]的信息!");
        return old${bigDoName};
    }


    /**
    * 修改
    * @param ${minDoName} ${minDoName}
    * @return ResultModel
    */
    @Override
    ResultModel<Integer> update${bigDoName}(${bigDoName} ${minDoName}){
        try {

            // validate
            ${bigDoName} old${minDoName} = validateForUpdate(${minDoName});

            // Update
            int num = ${minDaoName}.updateById(${minDoName});
            if (num < 1) {
                throw new Exception("sql修改数据为0,请检查各项参数!");
            }
            logger.info("修改ID=>[" + ${minDoName}.getId() + "]的${bigDoName}成功!");
            return new ResultModel<>();
        } catch (Exception e) {
            logger.error("修改ID=>[" + ${minDoName}.getId() + "]的${bigDoName}信息异常",e);
           return new ResultModel<Integer>(ResultModel.RESULT_SUCCESS,e.getMessage(),-1,0,null);
        }
    }


}
